##################
## Version 1.75 ##
##################
Many bug fixes, including: reaper scableDb volume, musicalwriting.intervalrestictions for multiple voices, issues with instruments when using -i interactive mode, issues with automatic dynamic detection with descriptordata.getDynamicFromFilename, problems with pitchfilter when using interactive mode/the API.

Also, better error handling for: audio files that cannot be read and empty directories, html.log printing if no segments get past an spass().

AudioGuide now skips sound files in a directory that start with '._'




##################
## Version 1.74 ##
##################
Various improvements and bug fixes, mostly related to instrument writing.

• added a method instrParams={'pitched': False} for unpitched instrument csf()s that should bypass pitchfilters and interval restrictions. Useful for unpitched sound collections that shouldn't be subject to static or temporal pitch filtering.
 
• added a method pitchfilter={'harmonics': ['D1']} for filtering with harmonics of one or more fundamental frequencies. This may be combined with other parameters; e.g. pitchfilter={'harmonics': ['D1'], 'pitches'=['C3', 1]} gives all harmonics of D1 as well as C3 and C# in any octave.

• rewrote instr(interval_limit_range_per_sec) so that it works properly.

• bug fixes for pitchfilter, 'closest' sub method of spass('parser'), midiPitchMethod={'type': 'file_match'}



##################
## Version 1.73 ##
##################
• bug fix in anallinkage.py


##################
## Version 1.72 ##
##################
• Better documentation of working with output file names. You can now specify output files or directories using the '$TIME' string, which adds the current time stamp to output files so that they are not overwritten each time agConcatenate.py runs. See examples/07-outputfiles.py.

• Velocity is now used in the bach output files and represents the volume of the selected sound (plus any attenuation from scaleDb or envelope). By default, it is mapped from -80dB=0 to -0dB=127. You can customize this mapping with BACH_DB_TO_VELOCITY_BREAKPOINTS.

• Better comments in the files in examples/.

• Various bug fixes. You can now have csound output files with spaces in the filenames!



##################
## Version 1.71 ##
##################
• Audioguide now supports writing reaper .rpp files. See examples/11-dawOutput.py for details.

• Added options for automatically launching .rpp and .aaf files after they are written. See AAF_AUTOLAUNCH and RPP_AUTOLAUNCH.

• Aaf and rpp output files now write the target soundfile in segments. These file formats also now support target signal decomposition - the segmented, decomposed target soundfile will be written to multiple tracks. See the reaper output in examples/08-polyphony.py.



#################
## Version 1.7 ##
#################
• Audioguide now has it’s own youtube channel, featuring a 5-part comprehensive tutorial on getting started with AudioGuide. You can browse the whole tutorial by topic on the new tutorials page.
https://www.youtube.com/channel/UCGvNi_pIEvWuiF_w3ZK8jOQ
http://www.benhackbarth.com/audioGuide/tutorial.html

• AudioGuide concatenations can now be written to .aaf files and opened in Logic/Pro Tools. See examples/11-dawOutput.py or https://www.youtube.com/watch?v=rHQI-jXd6iU

• Nadir Babouri created an AudioGuide package for the Atom Text Editor. See https://github.com/nadirB/audioguide-snippets


#################
## Version 1.6 ##
#################
• agConcatenate.py can now be run in "interactive mode" by adding the -i flag at runtime. Interactive mode runs agConcatenate.py as normal except that, after rendering and playing the concatenated output, the program stays open and monitors the options file for changes. When the options file is modified and saved, agConcatenate.py will examine the changes and rerun the parts of the program needed to create a new output. This makes it possible to use AudioGuide without having to repeatedly load large corpi. See https://www.youtube.com/watch?v=h0Ee77VoFe0
 
• A Max/MSP bach.roll output file is now written for each concatenation by default. Check out examples/10-bachOutput.py and maxmsp/bach/ag_playback.maxpat for details. Also see here https://www.youtube.com/watch?v=WoLNX2XWemQ&t=1006s

• When creating acoustic scores with Bach it is now possible to customize what data is written into which slots, including exporting descriptor data of selected sounds to bach. See http://www.benhackbarth.com/audioGuide/docs_v1.6.html#INSTRUMENTSSlots

• Removed midi file support as it was broken in python3 anyhow.



#################
## Version 1.5 ##
#################
• Total rewrite of the code for internally handling descriptor data. audioguide now runs about 40% faster with large corpi.

• Added new segmented data methods to calculate statistics on time vary descriptor data, including -minseg, -maxseg, -stdseg, -kurtseg, -skewseg. E.g. centroid-stdseg gives a sound segment's standard deviation of centroids. centroid-stats yields a combination of these statistics. See "Appendix 1 - Descriptors" in the docs for more info.

• New ways for interacting with the audioguide module and integrating it into your own project. See apiExample.py.
 
• For creating musical scores with Bach, added new methods for handling pitch as well as handling time -- instr(interval_limit_breakpoints) and instr(interval_limit_range_per_sec). See the Creating Notated Scores section of the documentation for details. This section of the documentation has also been rewritten.

• Numerous errors and bugs fixed.


##################
## Version 1.42 ##
##################
• Fixed a bug in the descriptor chromas and chromas-seg
 

#################
## Version 1.4 ##
#################
• Support for creating musical scores was added with the score() and instr() objects. See the "Creating Notated Scores" section of the documentation for details. For a video walkthrough, see http://www.benhackbarth.com/audioGuide/tutorial.html

• The order of unit selection in agConcatenate.py has changed. In previous versions, corpus segments were selected for each target segment in turn. Now, one selection is made per target segment until there are no valid target segments remaining. This gives better results, especially when creating notated scores. This means concatenations will yield slightly different results from version 1.37.

• Dynamic Time Warping was added as a distance method for time varying similarity calculations. It is invoked like this: d('centroid', distance='dtw'). Thanks to James Bradbury.


##################
## Version 1.37 ##
##################
• Added csf(pitchfilter) method. See docs. Thanks to Grégoire Lorieux for the idea.


##################
## Version 1.34 ##
##################
• Added support for target sf NMF signal decomposition. See examples/08-polyphony.py. Thanks to PA Tremblay.


##################
## Version 1.33 ##
##################
• Added a Max/MSP 6/7/8 java-based player for audioguide concatenations by Gilbert Nouno.
 

##################
## Version 1.32 ##
##################
• Change in the Chartjs support in the log.html was made so that the log.html works without an internet connection.
 
• Several options were renamed for clarity. These are now detailed in the “Post-Concatenation Event Manipulation” of the documentation.
	CSOUND_ALIGN_PEAKS was renamed OUTPUTEVENT_ALIGN_PEAKS
	OUTPUT_QUANTIZE_TIME_METHOD was renamed OUTPUTEVENT_QUANTIZE_TIME_METHOD
	OUTPUT_QUANTIZE_TIME_INTERVAL was renamed OUTPUTEVENT_QUANTIZE_TIME_INTERVAL
	OUTPUT_TIME_STRETCH was renamed OUTPUTEVENT_TIME_STRETCH
	OUTPUT_TIME_ADD was renamed OUTPUTEVENT_TIME_ADD
	CSOUND_RENDER_DUR was renamed OUTPUTEVENT_DURATION_SELECT
	CSOUND_SEGMENT_MIN_DUR was renamed OUTPUTEVENT_DURATION_MIN
	CSOUND_SEGMENT_MAX_DUR was renamed OUTPUTEVENT_DURATION_MAX



#################
## Version 1.3 ##
#################
• A longstanding bug was generating mostly incorrect f0 values. This is now fixed (Thanks to PA) and f0 should work much better.



##################
## Version 1.3b ##
##################
• Experimental script agConcatenateFrames.py was added, to support frame-by-frame concatenation (as opposed to segment-based concatenation). Try agConcatenateFrames.py examples/07-concatenateframes.py

• Bug fixes in ratio_limit (divide by zero error) and csf() restrictRepetition (Ben error)



##################
## Version 1.29 ##
##################
• AudioGuide no longer depends on the pysdif module.

• AudioGuide is now cross-compatible with Python2 and Python3. I’ve tested the code fairly thoroughly, and everything seems to work (midi file output is currently broken in Python3). Please send bugs if you find them.

• The log.txt output file from the agConcatenate.py script has been replaced with log.html. It logs similar information, but also includes interactive graphs and charts plotting corpus and target descriptor data using chartjs. I would like to augment this in the future.

• The agSegmentSf.py has a new option, -m, called multirise, which is disabled by default. However when this flag is added to a corpus file segmentation call, the segmentation algorithm will loop over the corpus soundfile several times, varying the user supplied riseRatio (-r) +/- 20%. This results in more segments being generated that can overlap with each other; certain segments will start at the same time, but last different durations. See the FinessingCorpusSegmentation section of the documentation.

• A new segmentation script called agGranulateSf.py has been added. It is useful for creating corpi with fixed-duration overlapping grains suitable for granular synthesis. See the documentation in examples/06-granular.py for details.

• A section about normalization has been added to the documentation.

• Csound rendering has changed slightly to be more flexible with regard to corpus soundfiles with different numbers of channels. By default, CSOUND_CHANNEL_RENDER_METHOD is now “corpusmax” and rendering supports 4-channel corpus files.

• You can now set the bit depth of concatenations rendered with Csound with CSOUND_BITS. 32 bit output files are now supported.

• Rendered concatenations can now be automatically normalized with CSOUND_NORMALIZE and CSOUND_NORMALIZE_PEAK_DB.

• You can now override the duration of corpus sounds in the Csound rendering process with CSOUND_SEGMENT_MIN_DUR and CSOUND_SEGMENT_MAX_DUR (these variable names will change in v1.32).

• Numerous bug fixes, including a bug in the segmentation algorithm that made it die.